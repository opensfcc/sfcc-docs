#!/usr/bin/env bash
#
# description:  Initialize New Git Repo with Native SFCC Cartridges
#               This script only needs to be run once when a git repo is setup for the first
#               time or whenever you need to spin up a build for continuous integration
# author:       Peter Schmalfeldt <me@peterschmalfeldt.com>

##################################################
# INITIALIZE PROJECT FOR SUBMODULES              #
##################################################

# Create local Constants
CWD=$PWD
DIR=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
START=`date +%s`
COUNT=0

# Get total number of modules from .gitmodules file
SUBMODULES=`git -C "${PWD}" config -f .gitmodules --get-regexp '^submodule\..*\.path$'`

# Get total number of modules from .gitmodules file
TOTAL=`echo "$SUBMODULES" | wc -l | sed -e 's/^[[:space:]]*//'`

if [ -f $CWD/.gitmodules ] && [ -s $CWD/.gitmodules ]; then
    make_header 'INITIALIZE GIT SUBMODULES'

    # Initialize and Update Submodules ( needed for Continuous Integration)
    git submodule update --init --recursive

    make_header 'INSTALLING SUBMODULE DEPENDENCIES'
    notice "This may take a few minutes ( we'll notify you when it's done )"

    # Cleaning NPM Cache
    npm cache clean --force > /dev/null 2>&1

    # Read .gitmodules file
    while read -r KEY MODULE_PATH; do
        (( COUNT++ ))
        NAME="$(echo "${KEY}" | sed 's/^submodule\.\(.*\)\.path$/\1/')"

        # Change into Submodule Directory based on Module Path
        cd $CWD/$MODULE_PATH

        # Check if we need to remove an existing node_modules folder
        if [ -d "node_modules" ]; then
            rm -fr node_modules > /dev/null 2>&1
        fi

        # Perform NPM install on Submodule ( hide all non-error output )
        log "$COUNT/$TOTAL: $NAME"
        npm clean-install --silent --no-audit --no-fund --legacy-peer-deps > /dev/null
    done <<< "$SUBMODULES"

    # Cleaning NPM Cache
    output 'Rebuilding Node Binaries ...'
    cd $CWD
    npm rebuild > /dev/null 2>&1
fi
