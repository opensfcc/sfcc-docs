#!/usr/bin/env bash
#
# description:  Remove Submodules
#               Use this script to purge all submodules as if they never existed
# author:       Peter Schmalfeldt <me@peterschmalfeldt.com>

##################################################
# INITIALIZE PROJECT FOR SUBMODULES              #
##################################################

# Create local Constants
CWD=$PWD
DIR=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
START=`date +%s`
COUNT=0

# Import Common Functions and Constants
source $DIR/common

# Get total number of modules from .gitmodules file
SUBMODULES=`git -C "${PWD}" config -f .gitmodules --get-regexp '^submodule\..*\.path$'`

# Get total number of modules from .gitmodules file
TOTAL=`echo "$SUBMODULES" | wc -l | sed -e 's/^[[:space:]]*//'`

if [ -f $CWD/.gitmodules ] && [ -s $CWD/.gitmodules ]; then
    make_header 'REMOVING GIT SUBMODULES'

    # Read .gitmodules file
    while read -r KEY MODULE_PATH; do
        (( COUNT++ ))
        NAME="$(echo "${KEY}" | sed 's/^submodule\.\(.*\)\.path$/\1/')"
        if [ -d "${MODULE_PATH}" ]; then
            notice "$COUNT/$TOTAL: $NAME"

            # Remove Git Cache
            git rm --cached $MODULE_PATH > /dev/null 2>&1

            # Remove Submodule
            rm -rf .git/modules/$NAME > /dev/null 2>&1

            # Removing local folder
            rm -rf "${MODULE_PATH}" > /dev/null 2>&1
        fi
    done <<< "$SUBMODULES"

    # Clear Git Modules File
    cat /dev/null > .gitmodules
fi
